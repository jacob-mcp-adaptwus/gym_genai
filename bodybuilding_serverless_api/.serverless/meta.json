{
  "C:\\coach_genai\\bodybuilding_serverless_api\\serverless.yml": {
    "versionFramework": "4.9.0",
    "servicePath": "C:\\coach_genai\\bodybuilding_serverless_api\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "bodybuildr-backend-infrastructure",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "stage": "dev",
        "region": "us-east-1",
        "tags": {
          "Environment": "dev",
          "Project": "bodybuildr"
        },
        "memorySize": 256,
        "timeout": 68,
        "apiGateway": {
          "binaryMediaTypes": [
            "image/png",
            "image/jpeg",
            "application/xlsx",
            "multipart/form-data"
          ],
          "minimumCompressionSize": 1024,
          "metrics": true,
          "timeoutInMillis": 69000
        },
        "environment": {
          "FILES_BUCKET": "bodybuildr-files-dev",
          "PLANS_TABLE": "bodybuildr-plans-table-dev",
          "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
          "USERS_TABLE": "bodybuildr-users-table-dev",
          "COGNITO": "cognito-dev",
          "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
          "PROGRESS_TABLE": "bodybuildr-progress-dev",
          "STAGE": "dev"
        },
        "iam": {
          "role": {
            "name": "bodybuildr-backend-infrastructure-dev-lambda-role",
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:*"
                ],
                "Resource": "arn:aws:dynamodb:*:*:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:*"
                ],
                "Resource": [
                  "arn:aws:s3:::bodybuildr-files-dev",
                  "arn:aws:s3:::bodybuildr-files-dev/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "secretsmanager:GetSecretValue"
                ],
                "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "bedrock:*"
                ],
                "Resource": "arn:aws:bedrock:*:*:*"
              }
            ]
          }
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AuthorizeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-authorize"
              }
            },
            "CreatePlanLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createPlan"
              }
            },
            "SavePlanLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-savePlan"
              }
            },
            "ListPlansLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-listPlans"
              }
            },
            "CreateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createUser"
              }
            },
            "UpdateUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateUser"
              }
            },
            "GetUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getUser"
              }
            },
            "UpdateProgressLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateProgress"
              }
            },
            "GetProgressLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getProgress"
              }
            },
            "GetPlanVersionsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getPlanVersions"
              }
            },
            "ChatWithCoachLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-chatWithCoach"
              }
            },
            "GetChatHistoryLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getChatHistory"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "bodybuildr-backend-infrastructure",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:*"
                          ],
                          "Resource": "arn:aws:dynamodb:*:*:*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:*"
                          ],
                          "Resource": [
                            "arn:aws:s3:::bodybuildr-files-dev",
                            "arn:aws:s3:::bodybuildr-files-dev/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "secretsmanager:GetSecretValue"
                          ],
                          "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "bedrock:*"
                          ],
                          "Resource": "arn:aws:bedrock:*:*:*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": "bodybuildr-backend-infrastructure-dev-lambda-role"
              }
            },
            "AuthorizeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/auth_handler.authorizer",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-authorize",
                "MemorySize": 128,
                "Timeout": 5,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AuthorizeLogGroup"
              ]
            },
            "CreatePlanLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/plan_handler.create_plan",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-createPlan",
                "MemorySize": 256,
                "Timeout": 65,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreatePlanLogGroup"
              ]
            },
            "SavePlanLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/plan_handler.save_plan",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-savePlan",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SavePlanLogGroup"
              ]
            },
            "ListPlansLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/plan_handler.list_plans",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-listPlans",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ListPlansLogGroup"
              ]
            },
            "CreateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/user_handler.create_user",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-createUser",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateUserLogGroup"
              ]
            },
            "UpdateUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/user_handler.update_user",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-updateUser",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateUserLogGroup"
              ]
            },
            "GetUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/user_handler.get_user",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-getUser",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserLogGroup"
              ]
            },
            "UpdateProgressLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/progress_handler.update_progress",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-updateProgress",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateProgressLogGroup"
              ]
            },
            "GetProgressLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/progress_handler.get_progress",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-getProgress",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetProgressLogGroup"
              ]
            },
            "GetPlanVersionsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/plan_handler.get_plan_versions",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-getPlanVersions",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPlanVersionsLogGroup"
              ]
            },
            "ChatWithCoachLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/chat_handler.chat_with_coach",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-chatWithCoach",
                "MemorySize": 256,
                "Timeout": 65,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ChatWithCoachLogGroup"
              ]
            },
            "GetChatHistoryLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                  "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
                },
                "Handler": "src/handlers/chat_handler.get_chat_history",
                "Runtime": "python3.12",
                "FunctionName": "bodybuildr-backend-infrastructure-dev-getChatHistory",
                "MemorySize": 256,
                "Timeout": 68,
                "Tags": [
                  {
                    "Key": "Environment",
                    "Value": "dev"
                  },
                  {
                    "Key": "Project",
                    "Value": "bodybuildr"
                  }
                ],
                "Environment": {
                  "Variables": {
                    "FILES_BUCKET": "bodybuildr-files-dev",
                    "PLANS_TABLE": "bodybuildr-plans-table-dev",
                    "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                    "USERS_TABLE": "bodybuildr-users-table-dev",
                    "COGNITO": "cognito-dev",
                    "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                    "PROGRESS_TABLE": "bodybuildr-progress-dev",
                    "STAGE": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetChatHistoryLogGroup"
              ]
            },
            "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AuthorizeLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreatePlanLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SavePlanLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ListPlansLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateUserLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateUserLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateProgressLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetProgressLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPlanVersionsLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ChatWithCoachLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetChatHistoryLambdaFunction"
                },
                "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-bodybuildr-backend-infrastructure",
                "BinaryMediaTypes": [
                  "image/png",
                  "image/jpeg",
                  "application/xlsx",
                  "multipart/form-data"
                ],
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": "",
                "MinimumCompressionSize": 1024
              }
            },
            "ApiGatewayResourcePlans": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "plans",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansCreate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlans"
                },
                "PathPart": "create",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansSave": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlans"
                },
                "PathPart": "save",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansList": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlans"
                },
                "PathPart": "list",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansVersions": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlans"
                },
                "PathPart": "versions",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansVersionsPlanidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlansVersions"
                },
                "PathPart": "{planId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansChat": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlans"
                },
                "PathPart": "chat",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansPlanidVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlans"
                },
                "PathPart": "{planId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourcePlansPlanidVarChatDashhistory": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourcePlansPlanidVar"
                },
                "PathPart": "chat-history",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsers": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "users",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersCreate": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "create",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUsersUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUsers"
                },
                "PathPart": "{userId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceProgress": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "progress",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceProgressUseridVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceProgress"
                },
                "PathPart": "{userId}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansCreateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansSaveOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansSave"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansListOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansList"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersCreateOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodUsersUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodProgressUseridVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProgressUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansVersionsPlanidVarOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansChatOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansChat"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodPlansCreatePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreatePlanLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodPlansSavePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansSave"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "SavePlanLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodPlansListGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansList"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ListPlansLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUsersCreatePost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersCreate"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUsersUseridVarPut": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "PUT",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodUsersUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUsersUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodProgressUseridVarPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProgressUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "UpdateProgressLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodProgressUseridVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceProgressUseridVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetProgressLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodPlansVersionsPlanidVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetPlanVersionsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodPlansChatPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansChat"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "ChatWithCoachLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "CUSTOM",
                "AuthorizerId": {
                  "Ref": "AuthorizeApiGatewayAuthorizer"
                },
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "TimeoutInMillis": 69000,
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetChatHistoryLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AuthorizeApiGatewayAuthorizer"
              ]
            },
            "AuthorizeApiGatewayAuthorizer": {
              "Type": "AWS::ApiGateway::Authorizer",
              "Properties": {
                "AuthorizerResultTtlInSeconds": 300,
                "IdentitySource": "method.request.header.Authorization",
                "Name": "authorize",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "AuthorizerUri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthorizeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                },
                "Type": "TOKEN"
              }
            },
            "ApiGatewayDeployment1742047243700": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodPlansCreateOptions",
                "ApiGatewayMethodPlansSaveOptions",
                "ApiGatewayMethodPlansListOptions",
                "ApiGatewayMethodUsersCreateOptions",
                "ApiGatewayMethodUsersUseridVarOptions",
                "ApiGatewayMethodProgressUseridVarOptions",
                "ApiGatewayMethodPlansVersionsPlanidVarOptions",
                "ApiGatewayMethodPlansChatOptions",
                "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions",
                "ApiGatewayMethodPlansCreatePost",
                "ApiGatewayMethodPlansSavePost",
                "ApiGatewayMethodPlansListGet",
                "ApiGatewayMethodUsersCreatePost",
                "ApiGatewayMethodUsersUseridVarPut",
                "ApiGatewayMethodUsersUseridVarGet",
                "ApiGatewayMethodProgressUseridVarPost",
                "ApiGatewayMethodProgressUseridVarGet",
                "ApiGatewayMethodPlansVersionsPlanidVarGet",
                "ApiGatewayMethodPlansChatPost",
                "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet"
              ]
            },
            "CreatePlanLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreatePlanLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AuthorizeLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AuthorizeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "SavePlanLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SavePlanLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ListPlansLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ListPlansLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UpdateProgressLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateProgressLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetProgressLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetProgressLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetPlanVersionsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPlanVersionsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "ChatWithCoachLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ChatWithCoachLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetChatHistoryLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetChatHistoryLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "FileBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "bodybuildr-files-dev",
                "VersioningConfiguration": {
                  "Status": "Enabled"
                },
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "FilesTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "bodybuildr-files-table-dev",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "filepath",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "filepath",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": true
                }
              }
            },
            "PlansTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "bodybuildr-plans-table-dev",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "planId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "planId",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": true
                }
              }
            },
            "PlanVersionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "bodybuildr-planversions-dev",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "planId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "version",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "planId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "version",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": true
                }
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "bodybuildr-users-table-dev",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": true
                }
              }
            },
            "ProgressTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "bodybuildr-progress-dev",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "date",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "date",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": true
                }
              }
            },
            "ChatHistoryTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "bodybuildr-chat-history-dev",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId_planId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "timestamp",
                    "AttributeType": "N"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId_planId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "RANGE"
                  }
                ],
                "PointInTimeRecoverySpecification": {
                  "PointInTimeRecoveryEnabled": true
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-ServerlessDeploymentBucketName"
              }
            },
            "AuthorizeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-AuthorizeLambdaFunctionQualifiedArn"
              }
            },
            "CreatePlanLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-CreatePlanLambdaFunctionQualifiedArn"
              }
            },
            "SavePlanLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-SavePlanLambdaFunctionQualifiedArn"
              }
            },
            "ListPlansLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-ListPlansLambdaFunctionQualifiedArn"
              }
            },
            "CreateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-CreateUserLambdaFunctionQualifiedArn"
              }
            },
            "UpdateUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateUserLambdaFunctionQualifiedArn"
              }
            },
            "GetUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-GetUserLambdaFunctionQualifiedArn"
              }
            },
            "UpdateProgressLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateProgressLambdaFunctionQualifiedArn"
              }
            },
            "GetProgressLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-GetProgressLambdaFunctionQualifiedArn"
              }
            },
            "GetPlanVersionsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-GetPlanVersionsLambdaFunctionQualifiedArn"
              }
            },
            "ChatWithCoachLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-ChatWithCoachLambdaFunctionQualifiedArn"
              }
            },
            "GetChatHistoryLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk"
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-GetChatHistoryLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-bodybuildr-backend-infrastructure-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "custom": {
        "stages": [
          "dev",
          "prod"
        ],
        "binaryMediaTypes": [
          "image/png",
          "image/jpeg",
          "application/xlsx",
          "multipart/form-data"
        ],
        "resourceNames": {
          "filesBucket": "bodybuildr-files-dev",
          "plansTable": "bodybuildr-plans-table-dev",
          "usersTable": "bodybuildr-users-table-dev",
          "filesTable": "bodybuildr-files-table-dev",
          "cognitoSecret": "<REDACTED>",
          "planVersionsTable": "bodybuildr-planversions-dev",
          "chatHistoryTable": "bodybuildr-chat-history-dev",
          "progressTable": "bodybuildr-progress-dev"
        },
        "environment": {
          "FILES_BUCKET": "bodybuildr-files-dev",
          "PLANS_TABLE": "bodybuildr-plans-table-dev",
          "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
          "USERS_TABLE": "bodybuildr-users-table-dev",
          "COGNITO": "cognito-dev",
          "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
          "PROGRESS_TABLE": "bodybuildr-progress-dev",
          "STAGE": "dev"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:*"
            ],
            "Resource": [
              "arn:aws:dynamodb:*:*:*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:*"
            ],
            "Resource": [
              "arn:aws:s3:::bodybuildr-files-dev",
              "arn:aws:s3:::bodybuildr-files-dev/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "secretsmanager:GetSecretValue"
            ],
            "Resource": [
              "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "bedrock:*"
            ],
            "Resource": [
              "arn:aws:bedrock:*:*:*"
            ]
          }
        ],
        "pythonRequirements": {
          "dockerizePip": false,
          "requirementsFile": "requirements.txt",
          "noDeploy": [
            "boto3",
            "botocore",
            "docutils",
            "jmespath",
            "python-dateutil",
            "s3transfer",
            "six",
            "pip",
            "setuptools"
          ],
          "patterns": [
            "**/__pycache__/**",
            "**/*.pyc",
            "**/*.pyo",
            "**/*.pyd",
            "**/.Python",
            "**/.env",
            "**/.venv",
            "**/env/",
            "**/venv/",
            "**/.eggs/",
            "**/.tox/",
            "**/.coverage",
            "**/.pytest_cache/",
            "**/.mypy_cache/"
          ]
        }
      },
      "functions": {
        "authorize": {
          "handler": "src/handlers/auth_handler.authorizer",
          "timeout": 5,
          "memorySize": 128,
          "events": [],
          "name": "bodybuildr-backend-infrastructure-dev-authorize",
          "package": {},
          "memory": 128,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0"
        },
        "createPlan": {
          "handler": "src/handlers/plan_handler.create_plan",
          "timeout": 65,
          "events": [
            {
              "http": {
                "path": "plans/create",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-createPlan",
          "package": {},
          "memory": 256,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA"
        },
        "savePlan": {
          "handler": "src/handlers/plan_handler.save_plan",
          "events": [
            {
              "http": {
                "path": "plans/save",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-savePlan",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s"
        },
        "listPlans": {
          "handler": "src/handlers/plan_handler.list_plans",
          "events": [
            {
              "http": {
                "path": "plans/list",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-listPlans",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo"
        },
        "createUser": {
          "handler": "src/handlers/user_handler.create_user",
          "events": [
            {
              "http": {
                "path": "users/create",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-createUser",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs"
        },
        "updateUser": {
          "handler": "src/handlers/user_handler.update_user",
          "events": [
            {
              "http": {
                "path": "users/{userId}",
                "method": "put",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "PUT"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-updateUser",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE"
        },
        "getUser": {
          "handler": "src/handlers/user_handler.get_user",
          "events": [
            {
              "http": {
                "path": "users/{userId}",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-getUser",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o"
        },
        "updateProgress": {
          "handler": "src/handlers/progress_handler.update_progress",
          "events": [
            {
              "http": {
                "path": "progress/{userId}",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-updateProgress",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE"
        },
        "getProgress": {
          "handler": "src/handlers/progress_handler.get_progress",
          "events": [
            {
              "http": {
                "path": "progress/{userId}",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-getProgress",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4"
        },
        "getPlanVersions": {
          "handler": "src/handlers/plan_handler.get_plan_versions",
          "events": [
            {
              "http": {
                "path": "plans/versions/{planId}",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-getPlanVersions",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0"
        },
        "chatWithCoach": {
          "handler": "src/handlers/chat_handler.chat_with_coach",
          "timeout": 65,
          "events": [
            {
              "http": {
                "path": "plans/chat",
                "method": "post",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-chatWithCoach",
          "package": {},
          "memory": 256,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc"
        },
        "getChatHistory": {
          "handler": "src/handlers/chat_handler.get_chat_history",
          "events": [
            {
              "http": {
                "path": "plans/{planId}/chat-history",
                "method": "get",
                "cors": {
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>",
                  "origins": [
                    "*"
                  ]
                },
                "authorizer": {
                  "type": "token",
                  "name": "authorize",
                  "arn": {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "managedExternally": false,
                  "resultTtlInSeconds": 300,
                  "identitySource": "method.request.header.Authorization",
                  "claims": []
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "bodybuildr-backend-infrastructure-dev-getChatHistory",
          "package": {},
          "memory": 256,
          "timeout": 68,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk"
        }
      },
      "plugins": [
        "serverless-python-requirements",
        "serverless-prune-plugin"
      ],
      "resources": {
        "Resources": {
          "FileBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "bodybuildr-files-dev",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "FilesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-files-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "filepath",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "filepath",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "PlansTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-plans-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "planId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "planId",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "PlanVersionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-planversions-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "planId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "version",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "planId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "version",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-users-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "ProgressTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-progress-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "date",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "ChatHistoryTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-chat-history-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId_planId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId_planId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "stage": "dev",
      "region": "us-east-1",
      "tags": {
        "Environment": "dev",
        "Project": "bodybuildr"
      },
      "memorySize": 256,
      "timeout": 68,
      "apiGateway": {
        "binaryMediaTypes": [
          "image/png",
          "image/jpeg",
          "application/xlsx",
          "multipart/form-data"
        ],
        "minimumCompressionSize": 1024,
        "metrics": true,
        "timeoutInMillis": 69000
      },
      "environment": {
        "FILES_BUCKET": "bodybuildr-files-dev",
        "PLANS_TABLE": "bodybuildr-plans-table-dev",
        "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
        "USERS_TABLE": "bodybuildr-users-table-dev",
        "COGNITO": "cognito-dev",
        "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
        "PROGRESS_TABLE": "bodybuildr-progress-dev",
        "STAGE": "dev"
      },
      "iam": {
        "role": {
          "name": "bodybuildr-backend-infrastructure-dev-lambda-role",
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "arn:aws:dynamodb:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "arn:aws:s3:::bodybuildr-files-dev",
                "arn:aws:s3:::bodybuildr-files-dev/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "bedrock:*"
              ],
              "Resource": "arn:aws:bedrock:*:*:*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AuthorizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-authorize"
            }
          },
          "CreatePlanLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createPlan"
            }
          },
          "SavePlanLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-savePlan"
            }
          },
          "ListPlansLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-listPlans"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getUser"
            }
          },
          "UpdateProgressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateProgress"
            }
          },
          "GetProgressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getProgress"
            }
          },
          "GetPlanVersionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getPlanVersions"
            }
          },
          "ChatWithCoachLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-chatWithCoach"
            }
          },
          "GetChatHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getChatHistory"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "bodybuildr-backend-infrastructure",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:*"
                        ],
                        "Resource": "arn:aws:dynamodb:*:*:*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:*"
                        ],
                        "Resource": [
                          "arn:aws:s3:::bodybuildr-files-dev",
                          "arn:aws:s3:::bodybuildr-files-dev/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "secretsmanager:GetSecretValue"
                        ],
                        "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "bedrock:*"
                        ],
                        "Resource": "arn:aws:bedrock:*:*:*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "bodybuildr-backend-infrastructure-dev-lambda-role"
            }
          },
          "AuthorizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/auth_handler.authorizer",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-authorize",
              "MemorySize": 128,
              "Timeout": 5,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizeLogGroup"
            ]
          },
          "CreatePlanLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/plan_handler.create_plan",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-createPlan",
              "MemorySize": 256,
              "Timeout": 65,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePlanLogGroup"
            ]
          },
          "SavePlanLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/plan_handler.save_plan",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-savePlan",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SavePlanLogGroup"
            ]
          },
          "ListPlansLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/plan_handler.list_plans",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-listPlans",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListPlansLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/user_handler.create_user",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-createUser",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/user_handler.update_user",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-updateUser",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/user_handler.get_user",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getUser",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateProgressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/progress_handler.update_progress",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-updateProgress",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProgressLogGroup"
            ]
          },
          "GetProgressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/progress_handler.get_progress",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getProgress",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProgressLogGroup"
            ]
          },
          "GetPlanVersionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/plan_handler.get_plan_versions",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getPlanVersions",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPlanVersionsLogGroup"
            ]
          },
          "ChatWithCoachLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/chat_handler.chat_with_coach",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-chatWithCoach",
              "MemorySize": 256,
              "Timeout": 65,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChatWithCoachLogGroup"
            ]
          },
          "GetChatHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/chat_handler.get_chat_history",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getChatHistory",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetChatHistoryLogGroup"
            ]
          },
          "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizeLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePlanLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SavePlanLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListPlansLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProgressLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProgressLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPlanVersionsLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChatWithCoachLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetChatHistoryLambdaFunction"
              },
              "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-bodybuildr-backend-infrastructure",
              "BinaryMediaTypes": [
                "image/png",
                "image/jpeg",
                "application/xlsx",
                "multipart/form-data"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourcePlans": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "plans",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansSave": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "save",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansVersions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "versions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansVersionsPlanidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlansVersions"
              },
              "PathPart": "{planId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansChat": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "chat",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansPlanidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "{planId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansPlanidVarChatDashhistory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlansPlanidVar"
              },
              "PathPart": "chat-history",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProgress": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "progress",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProgressUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProgress"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansCreateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansSaveOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansListOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersCreateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersUseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProgressUseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProgressUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansVersionsPlanidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansChatOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansChat"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansSavePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SavePlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansListGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersUseridVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodProgressUseridVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProgressUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProgressLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodProgressUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProgressUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProgressLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansVersionsPlanidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPlanVersionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansChatPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansChat"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChatWithCoachLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetChatHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "AuthorizeApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authorize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1742047243700": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPlansCreateOptions",
              "ApiGatewayMethodPlansSaveOptions",
              "ApiGatewayMethodPlansListOptions",
              "ApiGatewayMethodUsersCreateOptions",
              "ApiGatewayMethodUsersUseridVarOptions",
              "ApiGatewayMethodProgressUseridVarOptions",
              "ApiGatewayMethodPlansVersionsPlanidVarOptions",
              "ApiGatewayMethodPlansChatOptions",
              "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions",
              "ApiGatewayMethodPlansCreatePost",
              "ApiGatewayMethodPlansSavePost",
              "ApiGatewayMethodPlansListGet",
              "ApiGatewayMethodUsersCreatePost",
              "ApiGatewayMethodUsersUseridVarPut",
              "ApiGatewayMethodUsersUseridVarGet",
              "ApiGatewayMethodProgressUseridVarPost",
              "ApiGatewayMethodProgressUseridVarGet",
              "ApiGatewayMethodPlansVersionsPlanidVarGet",
              "ApiGatewayMethodPlansChatPost",
              "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet"
            ]
          },
          "CreatePlanLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePlanLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SavePlanLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SavePlanLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListPlansLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListPlansLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProgressLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProgressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProgressLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProgressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPlanVersionsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPlanVersionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChatWithCoachLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChatWithCoachLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetChatHistoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetChatHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FileBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "bodybuildr-files-dev",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "FilesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-files-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "filepath",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "filepath",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "PlansTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-plans-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "planId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "planId",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "PlanVersionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-planversions-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "planId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "version",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "planId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "version",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-users-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "ProgressTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-progress-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "date",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "ChatHistoryTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-chat-history-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId_planId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId_planId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ServerlessDeploymentBucketName"
            }
          },
          "AuthorizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-AuthorizeLambdaFunctionQualifiedArn"
            }
          },
          "CreatePlanLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-CreatePlanLambdaFunctionQualifiedArn"
            }
          },
          "SavePlanLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-SavePlanLambdaFunctionQualifiedArn"
            }
          },
          "ListPlansLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ListPlansLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProgressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateProgressLambdaFunctionQualifiedArn"
            }
          },
          "GetProgressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetProgressLambdaFunctionQualifiedArn"
            }
          },
          "GetPlanVersionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetPlanVersionsLambdaFunctionQualifiedArn"
            }
          },
          "ChatWithCoachLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ChatWithCoachLambdaFunctionQualifiedArn"
            }
          },
          "GetChatHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetChatHistoryLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# org: bodybuildr\r\nservice: bodybuildr-backend-infrastructure\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.12\r\n  stage: ${file(config.${opt:stage, 'dev'}.json):stage}\r\n  region: ${file(config.${opt:stage, 'dev'}.json):region, 'us-east-1'}\r\n  tags:\r\n    Environment: ${self:provider.stage}\r\n    Project: bodybuildr\r\n    \r\n  memorySize: 256\r\n  timeout: 68\r\n  apiGateway:\r\n    binaryMediaTypes: ${self:custom.binaryMediaTypes}\r\n    minimumCompressionSize: 1024\r\n    metrics: true\r\n    timeoutInMillis: 69000\r\n\r\n  environment: ${self:custom.environment}\r\n  \r\n  iam:\r\n    role:\r\n      name: ${self:service}-${self:provider.stage}-lambda-role\r\n      statements: ${self:custom.iamRoleStatements}\r\n\r\ncustom:\r\n  stages:\r\n    - dev\r\n    - prod\r\n    \r\n  binaryMediaTypes:\r\n    - 'image/png'\r\n    - 'image/jpeg'\r\n    - 'application/xlsx'\r\n    - 'multipart/form-data'\r\n    \r\n  resourceNames:\r\n    filesBucket: 'bodybuildr-files-${self:provider.stage}'\r\n    plansTable: 'bodybuildr-plans-table-${self:provider.stage}'\r\n    usersTable: 'bodybuildr-users-table-${self:provider.stage}'\r\n    filesTable: 'bodybuildr-files-table-${self:provider.stage}'\r\n    cognitoSecret: 'cognito-${self:provider.stage}'\r\n    planVersionsTable: 'bodybuildr-planversions-${self:provider.stage}'\r\n    chatHistoryTable: 'bodybuildr-chat-history-${self:provider.stage}'\r\n    progressTable: 'bodybuildr-progress-${self:provider.stage}'\r\n\r\n  environment:\r\n    FILES_BUCKET: ${self:custom.resourceNames.filesBucket}\r\n    PLANS_TABLE: ${self:custom.resourceNames.plansTable}\r\n    PLAN_VERSIONS_TABLE: ${self:custom.resourceNames.planVersionsTable}\r\n    USERS_TABLE: ${self:custom.resourceNames.usersTable}\r\n    COGNITO: ${self:custom.resourceNames.cognitoSecret}\r\n    CHAT_HISTORY_TABLE: ${self:custom.resourceNames.chatHistoryTable}\r\n    PROGRESS_TABLE: ${self:custom.resourceNames.progressTable}\r\n    STAGE: ${self:provider.stage}\r\n\r\n  iamRoleStatements:\r\n    - Effect: Allow\r\n      Action:\r\n        - dynamodb:*\r\n      Resource:\r\n        - arn:aws:dynamodb:*:*:*\r\n    - Effect: Allow\r\n      Action:\r\n        - s3:*\r\n      Resource: \r\n        - arn:aws:s3:::${self:custom.resourceNames.filesBucket}\r\n        - arn:aws:s3:::${self:custom.resourceNames.filesBucket}/*\r\n    - Effect: Allow\r\n      Action:\r\n        - secretsmanager:GetSecretValue\r\n      Resource: \r\n        - arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:custom.resourceNames.cognitoSecret}*\r\n    - Effect: Allow\r\n      Action:\r\n        - bedrock:*\r\n      Resource: \r\n        - arn:aws:bedrock:*:*:*\r\n\r\n  pythonRequirements:\r\n    dockerizePip: false\r\n    requirementsFile: requirements.txt\r\n    noDeploy: ${file(excludes/python-packages.json):noDeploy}\r\n    patterns: ${file(excludes/python-patterns.json):patterns}\r\n\r\nfunctions:\r\n  authorize:\r\n    handler: src/handlers/auth_handler.authorizer\r\n    timeout: 5\r\n    memorySize: 128\r\n\r\n  # Workout Plan Management\r\n  createPlan:\r\n    handler: src/handlers/plan_handler.create_plan\r\n    timeout: 65\r\n    events:\r\n      - http:\r\n          path: /plans/create\r\n          method: post\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  savePlan:\r\n    handler: src/handlers/plan_handler.save_plan\r\n    events:\r\n      - http:\r\n          path: /plans/save\r\n          method: post\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  listPlans:\r\n    handler: src/handlers/plan_handler.list_plans\r\n    events:\r\n      - http:\r\n          path: /plans/list\r\n          method: get\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  # User Profile Management\r\n  createUser:\r\n    handler: src/handlers/user_handler.create_user\r\n    events:\r\n      - http:\r\n          path: /users/create\r\n          method: post\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  updateUser:\r\n    handler: src/handlers/user_handler.update_user\r\n    events:\r\n      - http:\r\n          path: /users/{userId}\r\n          method: put\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  getUser:\r\n    handler: src/handlers/user_handler.get_user\r\n    events:\r\n      - http:\r\n          path: /users/{userId}\r\n          method: get\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  # Progress Tracking\r\n  updateProgress:\r\n    handler: src/handlers/progress_handler.update_progress\r\n    events:\r\n      - http:\r\n          path: /progress/{userId}\r\n          method: post\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  getProgress:\r\n    handler: src/handlers/progress_handler.get_progress\r\n    events:\r\n      - http:\r\n          path: /progress/{userId}\r\n          method: get\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  # Plan Versioning and Chat\r\n  getPlanVersions:\r\n    handler: src/handlers/plan_handler.get_plan_versions\r\n    events:\r\n      - http:\r\n          path: /plans/versions/{planId}\r\n          method: get\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  chatWithCoach:\r\n    handler: src/handlers/chat_handler.chat_with_coach\r\n    timeout: 65\r\n    events:\r\n      - http:\r\n          path: /plans/chat\r\n          method: post\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\n  getChatHistory:\r\n    handler: src/handlers/chat_handler.get_chat_history\r\n    events:\r\n      - http:\r\n          path: /plans/{planId}/chat-history\r\n          method: get\r\n          cors: ${file(api-config.json):cors}\r\n          authorizer: ${file(api-config.json):authorizer}\r\n\r\nplugins:\r\n  - serverless-python-requirements\r\n  - serverless-prune-plugin\r\n\r\nresources:\r\n  Resources:\r\n    FileBucket:\r\n      Type: AWS::S3::Bucket\r\n      Properties:\r\n        BucketName: ${self:custom.resourceNames.filesBucket}\r\n        VersioningConfiguration:\r\n          Status: Enabled\r\n        BucketEncryption:\r\n          ServerSideEncryptionConfiguration:\r\n            - ServerSideEncryptionByDefault:\r\n                SSEAlgorithm: AES256\r\n\r\n    FilesTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.resourceNames.filesTable}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: filepath\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: filepath\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: true\r\n\r\n    PlansTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.resourceNames.plansTable}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: planId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: planId\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: true\r\n\r\n    PlanVersionsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.resourceNames.planVersionsTable}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: planId\r\n            AttributeType: S\r\n          - AttributeName: version\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: planId\r\n            KeyType: HASH\r\n          - AttributeName: version\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: true\r\n\r\n    UsersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.resourceNames.usersTable}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: true\r\n\r\n    ProgressTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.resourceNames.progressTable}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: date\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: date\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: true\r\n\r\n    ChatHistoryTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:custom.resourceNames.chatHistoryTable}\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId_planId\r\n            AttributeType: S\r\n          - AttributeName: timestamp\r\n            AttributeType: N\r\n        KeySchema:\r\n          - AttributeName: userId_planId\r\n            KeyType: HASH\r\n          - AttributeName: timestamp\r\n            KeyType: RANGE\r\n        PointInTimeRecoverySpecification:\r\n          PointInTimeRecoveryEnabled: true ",
    "command": [
      "deploy"
    ],
    "options": {
      "stage": "dev",
      "verbose": true
    },
    "orgId": "5d88b43e-a091-468a-81a3-59c0174661e8",
    "orgName": "mathtilda",
    "userId": "RLw2P1bF2f5j0ZJjb1",
    "userName": "mathtilda",
    "serviceProviderAwsAccountId": "911167915455",
    "serviceProviderAwsCfStackName": "bodybuildr-backend-infrastructure-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:911167915455:stack/bodybuildr-backend-infrastructure-dev/f7eef670-01a5-11f0-b5c2-0afff3df4c43",
    "serviceProviderAwsCfStackCreated": "2025-03-15T14:01:19.075Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "CreatePlanLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-createPlan:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-CreatePlanLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateProgressLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-updateProgress:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-UpdateProgressLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AuthorizeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-authorize:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-AuthorizeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-updateUser:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-UpdateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ChatWithCoachLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-chatWithCoach:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-ChatWithCoachLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ListPlansLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-listPlans:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-ListPlansLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-getUser:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-GetUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetProgressLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-getProgress:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-GetProgressLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPlanVersionsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-getPlanVersions:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-GetPlanVersionsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "GetChatHistoryLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-getChatHistory:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-GetChatHistoryLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateUserLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-createUser:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-CreateUserLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://a0h7704tzj.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "SavePlanLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:911167915455:function:bodybuildr-backend-infrastructure-dev-savePlan:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-bodybuildr-backend-infrastructure-dev-SavePlanLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "AuthorizeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-authorize"
          }
        },
        "CreatePlanLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createPlan"
          }
        },
        "SavePlanLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-savePlan"
          }
        },
        "ListPlansLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-listPlans"
          }
        },
        "CreateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createUser"
          }
        },
        "UpdateUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateUser"
          }
        },
        "GetUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getUser"
          }
        },
        "UpdateProgressLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateProgress"
          }
        },
        "GetProgressLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getProgress"
          }
        },
        "GetPlanVersionsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getPlanVersions"
          }
        },
        "ChatWithCoachLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-chatWithCoach"
          }
        },
        "GetChatHistoryLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getChatHistory"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "bodybuildr-backend-infrastructure",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:*"
                      ],
                      "Resource": "arn:aws:dynamodb:*:*:*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:*"
                      ],
                      "Resource": [
                        "arn:aws:s3:::bodybuildr-files-dev",
                        "arn:aws:s3:::bodybuildr-files-dev/*"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "secretsmanager:GetSecretValue"
                      ],
                      "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "bedrock:*"
                      ],
                      "Resource": "arn:aws:bedrock:*:*:*"
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": "bodybuildr-backend-infrastructure-dev-lambda-role"
          }
        },
        "AuthorizeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/auth_handler.authorizer",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-authorize",
            "MemorySize": 128,
            "Timeout": 5,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AuthorizeLogGroup"
          ]
        },
        "CreatePlanLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/plan_handler.create_plan",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-createPlan",
            "MemorySize": 256,
            "Timeout": 65,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreatePlanLogGroup"
          ]
        },
        "SavePlanLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/plan_handler.save_plan",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-savePlan",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SavePlanLogGroup"
          ]
        },
        "ListPlansLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/plan_handler.list_plans",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-listPlans",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ListPlansLogGroup"
          ]
        },
        "CreateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/user_handler.create_user",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-createUser",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateUserLogGroup"
          ]
        },
        "UpdateUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/user_handler.update_user",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-updateUser",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateUserLogGroup"
          ]
        },
        "GetUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/user_handler.get_user",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-getUser",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserLogGroup"
          ]
        },
        "UpdateProgressLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/progress_handler.update_progress",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-updateProgress",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateProgressLogGroup"
          ]
        },
        "GetProgressLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/progress_handler.get_progress",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-getProgress",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetProgressLogGroup"
          ]
        },
        "GetPlanVersionsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/plan_handler.get_plan_versions",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-getPlanVersions",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetPlanVersionsLogGroup"
          ]
        },
        "ChatWithCoachLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/chat_handler.chat_with_coach",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-chatWithCoach",
            "MemorySize": 256,
            "Timeout": 65,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ChatWithCoachLogGroup"
          ]
        },
        "GetChatHistoryLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
              "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742047269998-2025-03-15T14:01:09.998Z/bodybuildr-backend-infrastructure.zip"
            },
            "Handler": "src/handlers/chat_handler.get_chat_history",
            "Runtime": "python3.12",
            "FunctionName": "bodybuildr-backend-infrastructure-dev-getChatHistory",
            "MemorySize": 256,
            "Timeout": 68,
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              },
              {
                "Key": "Project",
                "Value": "bodybuildr"
              }
            ],
            "Environment": {
              "Variables": {
                "FILES_BUCKET": "bodybuildr-files-dev",
                "PLANS_TABLE": "bodybuildr-plans-table-dev",
                "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                "USERS_TABLE": "bodybuildr-users-table-dev",
                "COGNITO": "cognito-dev",
                "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                "PROGRESS_TABLE": "bodybuildr-progress-dev",
                "STAGE": "dev"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetChatHistoryLogGroup"
          ]
        },
        "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AuthorizeLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreatePlanLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SavePlanLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ListPlansLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateUserLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateUserLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateProgressLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetProgressLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetPlanVersionsLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ChatWithCoachLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetChatHistoryLambdaFunction"
            },
            "CodeSha256": "UnLL2Zl7qe3b7Hc5cZGXNA4H17Rm4A5mgwIOcuBCpIo="
          }
        },
        "ApiGatewayRestApi": {
          "Type": "AWS::ApiGateway::RestApi",
          "Properties": {
            "Name": "dev-bodybuildr-backend-infrastructure",
            "BinaryMediaTypes": [
              "image/png",
              "image/jpeg",
              "application/xlsx",
              "multipart/form-data"
            ],
            "EndpointConfiguration": {
              "Types": [
                "EDGE"
              ]
            },
            "Policy": "",
            "MinimumCompressionSize": 1024
          }
        },
        "ApiGatewayResourcePlans": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "plans",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansCreate": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlans"
            },
            "PathPart": "create",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansSave": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlans"
            },
            "PathPart": "save",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansList": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlans"
            },
            "PathPart": "list",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansVersions": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlans"
            },
            "PathPart": "versions",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansVersionsPlanidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlansVersions"
            },
            "PathPart": "{planId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansChat": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlans"
            },
            "PathPart": "chat",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansPlanidVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlans"
            },
            "PathPart": "{planId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourcePlansPlanidVarChatDashhistory": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourcePlansPlanidVar"
            },
            "PathPart": "chat-history",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsers": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "users",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsersCreate": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsers"
            },
            "PathPart": "create",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceUsersUseridVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceUsers"
            },
            "PathPart": "{userId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceProgress": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "PathPart": "progress",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayResourceProgressUseridVar": {
          "Type": "AWS::ApiGateway::Resource",
          "Properties": {
            "ParentId": {
              "Ref": "ApiGatewayResourceProgress"
            },
            "PathPart": "{userId}",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansCreateOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansCreate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansSaveOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansSave"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansListOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansList"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsersCreateOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersCreate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodUsersUseridVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersUseridVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodProgressUseridVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourceProgressUseridVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansVersionsPlanidVarOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansChatOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansChat"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "AuthorizationType": "NONE",
            "HttpMethod": "OPTIONS",
            "MethodResponses": [
              {
                "StatusCode": "200",
                "ResponseParameters": {
                  "method.response.header.Access-Control-Allow-Origin": true,
                  "method.response.header.Access-Control-Allow-Headers": true,
                  "method.response.header.Access-Control-Allow-Methods": true
                },
                "ResponseModels": {}
              }
            ],
            "RequestParameters": {},
            "Integration": {
              "Type": "MOCK",
              "RequestTemplates": {
                "application/json": "{statusCode:200}"
              },
              "ContentHandling": "CONVERT_TO_TEXT",
              "IntegrationResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'",
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                  },
                  "ResponseTemplates": {
                    "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                  }
                }
              ]
            },
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "ApiGatewayMethodPlansCreatePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansCreate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreatePlanLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodPlansSavePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansSave"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "SavePlanLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodPlansListGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansList"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ListPlansLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUsersCreatePost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersCreate"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "CreateUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUsersUseridVarPut": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "PUT",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersUseridVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodUsersUseridVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceUsersUseridVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetUserLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodProgressUseridVarPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceProgressUseridVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "UpdateProgressLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodProgressUseridVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourceProgressUseridVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetProgressLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodPlansVersionsPlanidVarGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetPlanVersionsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodPlansChatPost": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "POST",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansChat"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "ChatWithCoachLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet": {
          "Type": "AWS::ApiGateway::Method",
          "Properties": {
            "HttpMethod": "GET",
            "RequestParameters": {},
            "ResourceId": {
              "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
            },
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ApiKeyRequired": "<REDACTED>",
            "AuthorizationType": "CUSTOM",
            "AuthorizerId": {
              "Ref": "AuthorizeApiGatewayAuthorizer"
            },
            "Integration": {
              "IntegrationHttpMethod": "POST",
              "Type": "AWS_PROXY",
              "TimeoutInMillis": 69000,
              "Uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "GetChatHistoryLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            },
            "MethodResponses": []
          },
          "DependsOn": [
            "AuthorizeApiGatewayAuthorizer"
          ]
        },
        "AuthorizeApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 300,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "authorize",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "AuthorizerUri": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":apigateway:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":lambda:path/2015-03-31/functions/",
                  {
                    "Fn::GetAtt": [
                      "AuthorizeLambdaFunction",
                      "Arn"
                    ]
                  },
                  "/invocations"
                ]
              ]
            },
            "Type": "TOKEN"
          }
        },
        "ApiGatewayDeployment1742047243700": {
          "Type": "AWS::ApiGateway::Deployment",
          "Properties": {
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "StageName": "dev"
          },
          "DependsOn": [
            "ApiGatewayMethodPlansCreateOptions",
            "ApiGatewayMethodPlansSaveOptions",
            "ApiGatewayMethodPlansListOptions",
            "ApiGatewayMethodUsersCreateOptions",
            "ApiGatewayMethodUsersUseridVarOptions",
            "ApiGatewayMethodProgressUseridVarOptions",
            "ApiGatewayMethodPlansVersionsPlanidVarOptions",
            "ApiGatewayMethodPlansChatOptions",
            "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions",
            "ApiGatewayMethodPlansCreatePost",
            "ApiGatewayMethodPlansSavePost",
            "ApiGatewayMethodPlansListGet",
            "ApiGatewayMethodUsersCreatePost",
            "ApiGatewayMethodUsersUseridVarPut",
            "ApiGatewayMethodUsersUseridVarGet",
            "ApiGatewayMethodProgressUseridVarPost",
            "ApiGatewayMethodProgressUseridVarGet",
            "ApiGatewayMethodPlansVersionsPlanidVarGet",
            "ApiGatewayMethodPlansChatPost",
            "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet"
          ]
        },
        "CreatePlanLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreatePlanLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "AuthorizeLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AuthorizeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "SavePlanLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SavePlanLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ListPlansLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ListPlansLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "CreateUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetUserLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "UpdateProgressLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateProgressLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetProgressLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetProgressLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetPlanVersionsLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetPlanVersionsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "ChatWithCoachLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ChatWithCoachLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "GetChatHistoryLambdaPermissionApiGateway": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetChatHistoryLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "/*/*"
                ]
              ]
            }
          }
        },
        "FileBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "bodybuildr-files-dev",
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }
          }
        },
        "FilesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-files-table-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "filepath",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "filepath",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "PlansTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-plans-table-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "planId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "planId",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "PlanVersionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-planversions-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "planId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "version",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "planId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "version",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-users-table-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "ProgressTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-progress-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "date",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "date",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "ChatHistoryTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-chat-history-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId_planId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId_planId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-ServerlessDeploymentBucketName"
          }
        },
        "AuthorizeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AuthorizeLambdaVersionkvNSl0DylxVvYdL2iKsf5PuocAsBMs9P4eNx14CEUI0"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-AuthorizeLambdaFunctionQualifiedArn"
          }
        },
        "CreatePlanLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreatePlanLambdaVersionMSrgS7hyS0EljVm0GooJHfUWrSz4J4Fne159dAnvA"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-CreatePlanLambdaFunctionQualifiedArn"
          }
        },
        "SavePlanLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SavePlanLambdaVersion3WflhmWAPcx4FNCnzZAgIPjVpJXLotaSIEebApcJN7s"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-SavePlanLambdaFunctionQualifiedArn"
          }
        },
        "ListPlansLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ListPlansLambdaVersion9C1a1eCf1oQiGZlBVBpc4Rm6buwt89rWymMguXMo"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-ListPlansLambdaFunctionQualifiedArn"
          }
        },
        "CreateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateUserLambdaVersionGQzQZwxMMHtV6CBmabME7sSWWk1117zgkNCONRR9bs"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-CreateUserLambdaFunctionQualifiedArn"
          }
        },
        "UpdateUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateUserLambdaVersionKqDOXhcYs40GJYx6VHJgK0BigeXdMpbeYJ5r4MNLtyE"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateUserLambdaFunctionQualifiedArn"
          }
        },
        "GetUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserLambdaVersiond2YfPb4yaopQWXbpoqSX1zA5sP9CBi26wZPds3o6q3o"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-GetUserLambdaFunctionQualifiedArn"
          }
        },
        "UpdateProgressLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateProgressLambdaVersionb0ZGr4LZf1YX1VyzvBSyEjrn0sRfOAjlitH8GcDnHbE"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateProgressLambdaFunctionQualifiedArn"
          }
        },
        "GetProgressLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetProgressLambdaVersionfEMasKo0F1ewcgPUyV6BdqIRBtehGIfoDzNonmfFr4"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-GetProgressLambdaFunctionQualifiedArn"
          }
        },
        "GetPlanVersionsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetPlanVersionsLambdaVersionj3U4ozj5PK1I3A07MkucXtLiNy6kXqWEXN2kw37n0"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-GetPlanVersionsLambdaFunctionQualifiedArn"
          }
        },
        "ChatWithCoachLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ChatWithCoachLambdaVersionqBE6KKjR6HNAcgrN7vpsNNhVz3YqDp6dh5Ew7K5uKc"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-ChatWithCoachLambdaFunctionQualifiedArn"
          }
        },
        "GetChatHistoryLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetChatHistoryLambdaVersionwm5IEZRkFcRohK3J8NpxcIGBsC5yJaetJH1Naq1Qnk"
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-GetChatHistoryLambdaFunctionQualifiedArn"
          }
        },
        "ServiceEndpoint": {
          "Description": "URL of the service endpoint",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                },
                "/dev"
              ]
            ]
          },
          "Export": {
            "Name": "sls-bodybuildr-backend-infrastructure-dev-ServiceEndpoint"
          }
        }
      }
    }
  }
}