{
  "service": {
    "service": "bodybuildr-backend-infrastructure",
    "serviceObject": {
      "name": "bodybuildr-backend-infrastructure"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "stage": "dev",
      "region": "us-east-1",
      "tags": {
        "Environment": "dev",
        "Project": "bodybuildr"
      },
      "memorySize": 256,
      "timeout": 68,
      "apiGateway": {
        "binaryMediaTypes": [
          "image/png",
          "image/jpeg",
          "application/xlsx",
          "multipart/form-data"
        ],
        "minimumCompressionSize": 1024,
        "metrics": true,
        "timeoutInMillis": 69000
      },
      "environment": {
        "FILES_BUCKET": "bodybuildr-files-dev",
        "PLANS_TABLE": "bodybuildr-plans-table-dev",
        "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
        "USERS_TABLE": "bodybuildr-users-table-dev",
        "COGNITO": "cognito-dev",
        "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
        "PROGRESS_TABLE": "bodybuildr-progress-dev",
        "STAGE": "dev"
      },
      "iam": {
        "role": {
          "name": "bodybuildr-backend-infrastructure-dev-lambda-role",
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "arn:aws:dynamodb:*:*:*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                "arn:aws:s3:::bodybuildr-files-dev",
                "arn:aws:s3:::bodybuildr-files-dev/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "bedrock:*"
              ],
              "Resource": "arn:aws:bedrock:*:*:*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AuthorizeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-authorize"
            }
          },
          "CreatePlanLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createPlan"
            }
          },
          "SavePlanLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-savePlan"
            }
          },
          "ListPlansLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-listPlans"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-createUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getUser"
            }
          },
          "DebugEnvironmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-debugEnvironment"
            }
          },
          "UpdateProgressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-updateProgress"
            }
          },
          "GetProgressLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getProgress"
            }
          },
          "GetPlanVersionsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getPlanVersions"
            }
          },
          "ChatWithCoachLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-chatWithCoach"
            }
          },
          "GetChatHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/bodybuildr-backend-infrastructure-dev-getChatHistory"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "bodybuildr-backend-infrastructure",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/bodybuildr-backend-infrastructure-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "bodybuildr-backend-infrastructure-dev-lambda-role"
            }
          },
          "AuthorizeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/auth.authorizer",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-authorize",
              "MemorySize": 128,
              "Timeout": 5,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthorizeLogGroup"
            ]
          },
          "CreatePlanLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/plan_handler.create_plan_handler",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-createPlan",
              "MemorySize": 256,
              "Timeout": 65,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreatePlanLogGroup"
            ]
          },
          "SavePlanLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/plan_handler.save_plan_handler",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-savePlan",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SavePlanLogGroup"
            ]
          },
          "ListPlansLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/plan_handler.list_plans_handler",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-listPlans",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListPlansLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/user_handler.create_user",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-createUser",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/user_handler.update_user",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-updateUser",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/user_handler.get_user",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getUser",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "DebugEnvironmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/handlers/debug_handler.debug_environment",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-debugEnvironment",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DebugEnvironmentLogGroup"
            ]
          },
          "UpdateProgressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/progress_handler.update_progress",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-updateProgress",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateProgressLogGroup"
            ]
          },
          "GetProgressLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/progress_handler.get_progress",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getProgress",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProgressLogGroup"
            ]
          },
          "GetPlanVersionsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/plan_handler.get_plan_versions_handler",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getPlanVersions",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPlanVersionsLogGroup"
            ]
          },
          "ChatWithCoachLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/chat_handler.chat_with_coach",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-chatWithCoach",
              "MemorySize": 256,
              "Timeout": 65,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ChatWithCoachLogGroup"
            ]
          },
          "GetChatHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
                "S3Key": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z/bodybuildr-backend-infrastructure.zip"
              },
              "Handler": "src/chat_handler.get_chat_history",
              "Runtime": "python3.12",
              "FunctionName": "bodybuildr-backend-infrastructure-dev-getChatHistory",
              "MemorySize": 256,
              "Timeout": 68,
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                },
                {
                  "Key": "Project",
                  "Value": "bodybuildr"
                }
              ],
              "Environment": {
                "Variables": {
                  "FILES_BUCKET": "bodybuildr-files-dev",
                  "PLANS_TABLE": "bodybuildr-plans-table-dev",
                  "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
                  "USERS_TABLE": "bodybuildr-users-table-dev",
                  "COGNITO": "cognito-dev",
                  "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
                  "PROGRESS_TABLE": "bodybuildr-progress-dev",
                  "STAGE": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetChatHistoryLogGroup"
            ]
          },
          "AuthorizeLambdaVersionqyxyM5lSOqtuf1qB7MUXvDjeVVjOuSN2HNyeXaU5waQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthorizeLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "CreatePlanLambdaVersion7uhHZ6if4OcMm4TKn7OgwCvddmCSZcHdpf1HIbYAn0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreatePlanLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "SavePlanLambdaVersion1Djli3eYfDXqPAJBlJOhFWlMLTbe5oWXiMVBwHk4B7k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SavePlanLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "ListPlansLambdaVersionwvWDqJ9neke4g0nbaAnHRh4vAviEqBSs8BdNvd4p4I0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListPlansLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "CreateUserLambdaVersionQQ8oO52NKYbFNFa2zEYPpXy1PX3rwc2Th7ibaUgmro": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "UpdateUserLambdaVersionmWGVVZNmhnI2AQcYmhd8bKDcG4QOy67cXeuMMEC8o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "GetUserLambdaVersiontZD1DdHTbLJvpDYSDyYS1NPnadpDnqaMAF6OzbLJ7IQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "DebugEnvironmentLambdaVersion7mGetAyqhLMlN0vF2qRkoCTXoAcD2RdtNJT5D7O8k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DebugEnvironmentLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "UpdateProgressLambdaVersionATDTr3uf4tax3v5Pbxlez7uevjyxT52f1A5BJymw8k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateProgressLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "GetProgressLambdaVersionIBIeTMiexiEzTi05Gz4qEErCZBMPoRNJWVxdZbUcmI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProgressLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "GetPlanVersionsLambdaVersionzgbr6tXybd7e2mpxG1A1FwuEFoTF78elbJdJZIBA4g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPlanVersionsLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "ChatWithCoachLambdaVersion4maJrgPinvpTHHikKIsWw7EFd0YovZ6lrdTqqNWpOk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChatWithCoachLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "GetChatHistoryLambdaVersion8L2RjTjx5emWzx49pTMLA8xfuZ90DcOfjZzL915ebng": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetChatHistoryLambdaFunction"
              },
              "CodeSha256": "FV2+zoIhg5V40kaPDCSLESWijWLbHDsU4W2yJT8OKJU="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-bodybuildr-backend-infrastructure",
              "BinaryMediaTypes": [
                "image/png",
                "image/jpeg",
                "application/xlsx",
                "multipart/form-data"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourcePlans": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "plans",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansSave": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "save",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansVersions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "versions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansVersionsPlanidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlansVersions"
              },
              "PathPart": "{planId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansChat": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "chat",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansPlanidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlans"
              },
              "PathPart": "{planId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlansPlanidVarChatDashhistory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePlansPlanidVar"
              },
              "PathPart": "chat-history",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebug": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "debug",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDebugEnvironment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceDebug"
              },
              "PathPart": "environment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProgress": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "progress",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProgressUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProgress"
              },
              "PathPart": "{userId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansCreateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansSaveOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansListOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersCreateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersUseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDebugEnvironmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugEnvironment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProgressUseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProgressUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansVersionsPlanidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansChatOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansChat"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPlansCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreatePlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansSavePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansSave"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SavePlanLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansListGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansList"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListPlansLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersUseridVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodDebugEnvironmentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDebugEnvironment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DebugEnvironmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DebugEnvironmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProgressUseridVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProgressUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateProgressLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodProgressUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProgressUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProgressLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansVersionsPlanidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansVersionsPlanidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPlanVersionsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansChatPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansChat"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChatWithCoachLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlansPlanidVarChatDashhistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizeApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "TimeoutInMillis": 69000,
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetChatHistoryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthorizeApiGatewayAuthorizer"
            ]
          },
          "AuthorizeApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authorize",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthorizeLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1742091573600": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodPlansCreateOptions",
              "ApiGatewayMethodPlansSaveOptions",
              "ApiGatewayMethodPlansListOptions",
              "ApiGatewayMethodUsersCreateOptions",
              "ApiGatewayMethodUsersUseridVarOptions",
              "ApiGatewayMethodDebugEnvironmentOptions",
              "ApiGatewayMethodProgressUseridVarOptions",
              "ApiGatewayMethodPlansVersionsPlanidVarOptions",
              "ApiGatewayMethodPlansChatOptions",
              "ApiGatewayMethodPlansPlanidVarChatDashhistoryOptions",
              "ApiGatewayMethodPlansCreatePost",
              "ApiGatewayMethodPlansSavePost",
              "ApiGatewayMethodPlansListGet",
              "ApiGatewayMethodUsersCreatePost",
              "ApiGatewayMethodUsersUseridVarPut",
              "ApiGatewayMethodUsersUseridVarGet",
              "ApiGatewayMethodDebugEnvironmentGet",
              "ApiGatewayMethodProgressUseridVarPost",
              "ApiGatewayMethodProgressUseridVarGet",
              "ApiGatewayMethodPlansVersionsPlanidVarGet",
              "ApiGatewayMethodPlansChatPost",
              "ApiGatewayMethodPlansPlanidVarChatDashhistoryGet"
            ]
          },
          "CreatePlanLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreatePlanLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthorizeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SavePlanLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SavePlanLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListPlansLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListPlansLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DebugEnvironmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DebugEnvironmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateProgressLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateProgressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProgressLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProgressLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPlanVersionsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPlanVersionsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChatWithCoachLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChatWithCoachLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetChatHistoryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetChatHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FileBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "bodybuildr-files-dev",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "FilesTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-files-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "filepath",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "filepath",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "PlansTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-plans-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "planId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "planId",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "PlanVersionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-planversions-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "planId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "version",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "planId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "version",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-users-table-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "ProgressTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-progress-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "date",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          },
          "ChatHistoryTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "bodybuildr-chat-history-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId_planId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId_planId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ],
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-cfd30ff4-8aeb",
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ServerlessDeploymentBucketName"
            }
          },
          "AuthorizeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthorizeLambdaVersionqyxyM5lSOqtuf1qB7MUXvDjeVVjOuSN2HNyeXaU5waQ"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-AuthorizeLambdaFunctionQualifiedArn"
            }
          },
          "CreatePlanLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreatePlanLambdaVersion7uhHZ6if4OcMm4TKn7OgwCvddmCSZcHdpf1HIbYAn0"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-CreatePlanLambdaFunctionQualifiedArn"
            }
          },
          "SavePlanLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SavePlanLambdaVersion1Djli3eYfDXqPAJBlJOhFWlMLTbe5oWXiMVBwHk4B7k"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-SavePlanLambdaFunctionQualifiedArn"
            }
          },
          "ListPlansLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListPlansLambdaVersionwvWDqJ9neke4g0nbaAnHRh4vAviEqBSs8BdNvd4p4I0"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ListPlansLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionQQ8oO52NKYbFNFa2zEYPpXy1PX3rwc2Th7ibaUgmro"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionmWGVVZNmhnI2AQcYmhd8bKDcG4QOy67cXeuMMEC8o"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersiontZD1DdHTbLJvpDYSDyYS1NPnadpDnqaMAF6OzbLJ7IQ"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "DebugEnvironmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DebugEnvironmentLambdaVersion7mGetAyqhLMlN0vF2qRkoCTXoAcD2RdtNJT5D7O8k"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-DebugEnvironmentLambdaFunctionQualifiedArn"
            }
          },
          "UpdateProgressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateProgressLambdaVersionATDTr3uf4tax3v5Pbxlez7uevjyxT52f1A5BJymw8k"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-UpdateProgressLambdaFunctionQualifiedArn"
            }
          },
          "GetProgressLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProgressLambdaVersionIBIeTMiexiEzTi05Gz4qEErCZBMPoRNJWVxdZbUcmI"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetProgressLambdaFunctionQualifiedArn"
            }
          },
          "GetPlanVersionsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPlanVersionsLambdaVersionzgbr6tXybd7e2mpxG1A1FwuEFoTF78elbJdJZIBA4g"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetPlanVersionsLambdaFunctionQualifiedArn"
            }
          },
          "ChatWithCoachLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChatWithCoachLambdaVersion4maJrgPinvpTHHikKIsWw7EFd0YovZ6lrdTqqNWpOk"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ChatWithCoachLambdaFunctionQualifiedArn"
            }
          },
          "GetChatHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetChatHistoryLambdaVersion8L2RjTjx5emWzx49pTMLA8xfuZ90DcOfjZzL915ebng"
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-GetChatHistoryLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-bodybuildr-backend-infrastructure-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "stages": [
        "dev",
        "prod"
      ],
      "binaryMediaTypes": [
        "image/png",
        "image/jpeg",
        "application/xlsx",
        "multipart/form-data"
      ],
      "resourceNames": {
        "filesBucket": "bodybuildr-files-dev",
        "plansTable": "bodybuildr-plans-table-dev",
        "usersTable": "bodybuildr-users-table-dev",
        "filesTable": "bodybuildr-files-table-dev",
        "cognitoSecret": "cognito-dev",
        "planVersionsTable": "bodybuildr-planversions-dev",
        "chatHistoryTable": "bodybuildr-chat-history-dev",
        "progressTable": "bodybuildr-progress-dev"
      },
      "environment": {
        "FILES_BUCKET": "bodybuildr-files-dev",
        "PLANS_TABLE": "bodybuildr-plans-table-dev",
        "PLAN_VERSIONS_TABLE": "bodybuildr-planversions-dev",
        "USERS_TABLE": "bodybuildr-users-table-dev",
        "COGNITO": "cognito-dev",
        "CHAT_HISTORY_TABLE": "bodybuildr-chat-history-dev",
        "PROGRESS_TABLE": "bodybuildr-progress-dev",
        "STAGE": "dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": [
            "arn:aws:dynamodb:*:*:*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:*"
          ],
          "Resource": [
            "arn:aws:s3:::bodybuildr-files-dev",
            "arn:aws:s3:::bodybuildr-files-dev/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue"
          ],
          "Resource": [
            "arn:aws:secretsmanager:us-east-1:*:secret:cognito-dev*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "bedrock:*"
          ],
          "Resource": [
            "arn:aws:bedrock:*:*:*"
          ]
        }
      ],
      "pythonRequirements": {
        "dockerizePip": true,
        "requirementsFile": "requirements.txt",
        "noDeploy": [
          "boto3",
          "botocore",
          "pip",
          "setuptools",
          "wheel",
          "coverage",
          "pytest",
          "mock",
          "black",
          "mypy",
          "pylint",
          "*.dist-info",
          "*.egg-info",
          "venv*",
          "pip*",
          "*-info",
          ".pytest_cache",
          "__pycache__",
          "*.pyc",
          "langchain*",
          "numpy*",
          "pandas*",
          "scipy*",
          "sklearn*",
          "tensorflow*",
          "torch*",
          "transformers*",
          "aws-cdk-lib*",
          "aws-cdk.core*",
          "constructs*",
          "python-dateutil*",
          "six*",
          "typing-extensions*",
          "urllib3*"
        ],
        "patterns": [
          "!**/*.py[cod]",
          "!**/__pycache__",
          "!.pytest_cache",
          "!tests/",
          "!samples/",
          "!docs/",
          "!.venv/",
          "!.git/",
          "!.github/",
          "!**/*.swp",
          "!**/*.swo",
          "!**/.DS_Store",
          "!**/*.egg-info/",
          "!**/*.dist-info/",
          "!.coverage",
          "!htmlcov/",
          "!.tox/",
          "!.mypy_cache/",
          "!.idea/",
          "!.vscode/",
          "!node_modules/",
          "!*.pyc",
          "!*.pyo",
          "!*.pyd",
          "!.Python",
          "!env/",
          "!build/",
          "!develop-eggs/",
          "!dist/",
          "!downloads/",
          "!eggs/",
          "!lib/",
          "!lib64/",
          "!parts/",
          "!sdist/",
          "!var/"
        ]
      }
    },
    "plugins": [
      "serverless-python-requirements",
      "serverless-prune-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "authorize": {
        "handler": "src/auth.authorizer",
        "timeout": 5,
        "memorySize": 128,
        "events": [],
        "name": "bodybuildr-backend-infrastructure-dev-authorize",
        "package": {},
        "memory": 128,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "AuthorizeLambdaVersionqyxyM5lSOqtuf1qB7MUXvDjeVVjOuSN2HNyeXaU5waQ"
      },
      "createPlan": {
        "handler": "src/plan_handler.create_plan_handler",
        "timeout": 65,
        "events": [
          {
            "http": {
              "path": "plans/create",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-createPlan",
        "package": {},
        "memory": 256,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "CreatePlanLambdaVersion7uhHZ6if4OcMm4TKn7OgwCvddmCSZcHdpf1HIbYAn0"
      },
      "savePlan": {
        "handler": "src/plan_handler.save_plan_handler",
        "events": [
          {
            "http": {
              "path": "plans/save",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-savePlan",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "SavePlanLambdaVersion1Djli3eYfDXqPAJBlJOhFWlMLTbe5oWXiMVBwHk4B7k"
      },
      "listPlans": {
        "handler": "src/plan_handler.list_plans_handler",
        "events": [
          {
            "http": {
              "path": "plans/list",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-listPlans",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "ListPlansLambdaVersionwvWDqJ9neke4g0nbaAnHRh4vAviEqBSs8BdNvd4p4I0"
      },
      "createUser": {
        "handler": "src/user_handler.create_user",
        "events": [
          {
            "http": {
              "path": "users/create",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-createUser",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionQQ8oO52NKYbFNFa2zEYPpXy1PX3rwc2Th7ibaUgmro"
      },
      "updateUser": {
        "handler": "src/user_handler.update_user",
        "events": [
          {
            "http": {
              "path": "users/{userId}",
              "method": "put",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-updateUser",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionmWGVVZNmhnI2AQcYmhd8bKDcG4QOy67cXeuMMEC8o"
      },
      "getUser": {
        "handler": "src/user_handler.get_user",
        "events": [
          {
            "http": {
              "path": "users/{userId}",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-getUser",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersiontZD1DdHTbLJvpDYSDyYS1NPnadpDnqaMAF6OzbLJ7IQ"
      },
      "debugEnvironment": {
        "handler": "src/handlers/debug_handler.debug_environment",
        "events": [
          {
            "http": {
              "path": "debug/environment",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-debugEnvironment",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "DebugEnvironmentLambdaVersion7mGetAyqhLMlN0vF2qRkoCTXoAcD2RdtNJT5D7O8k"
      },
      "updateProgress": {
        "handler": "src/progress_handler.update_progress",
        "events": [
          {
            "http": {
              "path": "progress/{userId}",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-updateProgress",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "UpdateProgressLambdaVersionATDTr3uf4tax3v5Pbxlez7uevjyxT52f1A5BJymw8k"
      },
      "getProgress": {
        "handler": "src/progress_handler.get_progress",
        "events": [
          {
            "http": {
              "path": "progress/{userId}",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-getProgress",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "GetProgressLambdaVersionIBIeTMiexiEzTi05Gz4qEErCZBMPoRNJWVxdZbUcmI"
      },
      "getPlanVersions": {
        "handler": "src/plan_handler.get_plan_versions_handler",
        "events": [
          {
            "http": {
              "path": "plans/versions/{planId}",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-getPlanVersions",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "GetPlanVersionsLambdaVersionzgbr6tXybd7e2mpxG1A1FwuEFoTF78elbJdJZIBA4g"
      },
      "chatWithCoach": {
        "handler": "src/chat_handler.chat_with_coach",
        "timeout": 65,
        "events": [
          {
            "http": {
              "path": "plans/chat",
              "method": "post",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-chatWithCoach",
        "package": {},
        "memory": 256,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "ChatWithCoachLambdaVersion4maJrgPinvpTHHikKIsWw7EFd0YovZ6lrdTqqNWpOk"
      },
      "getChatHistory": {
        "handler": "src/chat_handler.get_chat_history",
        "events": [
          {
            "http": {
              "path": "plans/{planId}/chat-history",
              "method": "get",
              "cors": {
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": false,
                "origins": [
                  "*"
                ]
              },
              "authorizer": {
                "type": "token",
                "name": "authorize",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthorizeLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "bodybuildr-backend-infrastructure-dev-getChatHistory",
        "package": {},
        "memory": 256,
        "timeout": 68,
        "runtime": "python3.12",
        "vpc": {},
        "versionLogicalId": "GetChatHistoryLambdaVersion8L2RjTjx5emWzx49pTMLA8xfuZ90DcOfjZzL915ebng"
      }
    },
    "resources": {
      "Resources": {
        "FileBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "bodybuildr-files-dev",
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "BucketEncryption": {
              "ServerSideEncryptionConfiguration": [
                {
                  "ServerSideEncryptionByDefault": {
                    "SSEAlgorithm": "AES256"
                  }
                }
              ]
            }
          }
        },
        "FilesTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-files-table-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "filepath",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "filepath",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "PlansTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-plans-table-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "planId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "planId",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "PlanVersionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-planversions-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "planId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "version",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "planId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "version",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-users-table-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "ProgressTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-progress-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "date",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "date",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        },
        "ChatHistoryTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "bodybuildr-chat-history-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId_planId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId_planId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ],
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "bodybuildr-backend-infrastructure",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "C:\\coach_genai\\bodybuilding_serverless_api\\.serverless\\bodybuildr-backend-infrastructure.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/bodybuildr-backend-infrastructure/dev/1742091591609-2025-03-16T02:19:51.609Z",
    "artifact": "bodybuildr-backend-infrastructure.zip"
  }
}